'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.0
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Blog")>  _
Partial Public Class BlogDbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "可扩展性方法定义"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUsers(instance As Users)
    End Sub
  Partial Private Sub UpdateUsers(instance As Users)
    End Sub
  Partial Private Sub DeleteUsers(instance As Users)
    End Sub
  Partial Private Sub InsertArticles(instance As Articles)
    End Sub
  Partial Private Sub UpdateArticles(instance As Articles)
    End Sub
  Partial Private Sub DeleteArticles(instance As Articles)
    End Sub
  Partial Private Sub InsertArticleHistorys(instance As ArticleHistorys)
    End Sub
  Partial Private Sub UpdateArticleHistorys(instance As ArticleHistorys)
    End Sub
  Partial Private Sub DeleteArticleHistorys(instance As ArticleHistorys)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BlogConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of Users)
		Get
			Return Me.GetTable(Of Users)
		End Get
	End Property
	
	Public ReadOnly Property Articles() As System.Data.Linq.Table(Of Articles)
		Get
			Return Me.GetTable(Of Articles)
		End Get
	End Property
	
	Public ReadOnly Property ArticleHistorys() As System.Data.Linq.Table(Of ArticleHistorys)
		Get
			Return Me.GetTable(Of ArticleHistorys)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class Users
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _UserCode As String
	
	Private _Age As System.Nullable(Of Integer)
	
	Private _Sex As String
	
	Private _RegDate As System.Nullable(Of Date)
	
	Private _Role As String
	
	Private _IsLocked As System.Nullable(Of Byte)
	
	Private _IsEnabled As System.Nullable(Of Byte)
	
	Private _Articles As EntitySet(Of Articles)
	
	Private _ArticleHistorys As EntitySet(Of ArticleHistorys)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnUserCodeChanging(value As String)
    End Sub
    Partial Private Sub OnUserCodeChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As String)
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnRegDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegDateChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    Partial Private Sub OnIsLockedChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnIsLockedChanged()
    End Sub
    Partial Private Sub OnIsEnabledChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnIsEnabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Articles = New EntitySet(Of Articles)(AddressOf Me.attach_Articles, AddressOf Me.detach_Articles)
		Me._ArticleHistorys = New EntitySet(Of ArticleHistorys)(AddressOf Me.attach_ArticleHistorys, AddressOf Me.detach_ArticleHistorys)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(MAX)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserCode", DbType:="NVarChar(MAX)")>  _
	Public Property UserCode() As String
		Get
			Return Me._UserCode
		End Get
		Set
			If (String.Equals(Me._UserCode, value) = false) Then
				Me.OnUserCodeChanging(value)
				Me.SendPropertyChanging
				Me._UserCode = value
				Me.SendPropertyChanged("UserCode")
				Me.OnUserCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="Int")>  _
	Public Property Age() As System.Nullable(Of Integer)
		Get
			Return Me._Age
		End Get
		Set
			If (Me._Age.Equals(value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sex", DbType:="NVarChar(50)")>  _
	Public Property Sex() As String
		Get
			Return Me._Sex
		End Get
		Set
			If (String.Equals(Me._Sex, value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegDate", DbType:="DateTime")>  _
	Public Property RegDate() As System.Nullable(Of Date)
		Get
			Return Me._RegDate
		End Get
		Set
			If (Me._RegDate.Equals(value) = false) Then
				Me.OnRegDateChanging(value)
				Me.SendPropertyChanging
				Me._RegDate = value
				Me.SendPropertyChanged("RegDate")
				Me.OnRegDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="NVarChar(50)")>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLocked", DbType:="TinyInt")>  _
	Public Property IsLocked() As System.Nullable(Of Byte)
		Get
			Return Me._IsLocked
		End Get
		Set
			If (Me._IsLocked.Equals(value) = false) Then
				Me.OnIsLockedChanging(value)
				Me.SendPropertyChanging
				Me._IsLocked = value
				Me.SendPropertyChanged("IsLocked")
				Me.OnIsLockedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEnabled", DbType:="TinyInt")>  _
	Public Property IsEnabled() As System.Nullable(Of Byte)
		Get
			Return Me._IsEnabled
		End Get
		Set
			If (Me._IsEnabled.Equals(value) = false) Then
				Me.OnIsEnabledChanging(value)
				Me.SendPropertyChanging
				Me._IsEnabled = value
				Me.SendPropertyChanged("IsEnabled")
				Me.OnIsEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Users_Articles", Storage:="_Articles", ThisKey:="ID", OtherKey:="UserID")>  _
	Public Property Articles() As EntitySet(Of Articles)
		Get
			Return Me._Articles
		End Get
		Set
			Me._Articles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Users_ArticleHistorys", Storage:="_ArticleHistorys", ThisKey:="ID", OtherKey:="UserID")>  _
	Public Property ArticleHistorys() As EntitySet(Of ArticleHistorys)
		Get
			Return Me._ArticleHistorys
		End Get
		Set
			Me._ArticleHistorys.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Articles(ByVal entity As Articles)
		Me.SendPropertyChanging
		entity.Users = Me
	End Sub
	
	Private Sub detach_Articles(ByVal entity As Articles)
		Me.SendPropertyChanging
		entity.Users = Nothing
	End Sub
	
	Private Sub attach_ArticleHistorys(ByVal entity As ArticleHistorys)
		Me.SendPropertyChanging
		entity.Users = Me
	End Sub
	
	Private Sub detach_ArticleHistorys(ByVal entity As ArticleHistorys)
		Me.SendPropertyChanging
		entity.Users = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Articles")>  _
Partial Public Class Articles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ArticleTitle As String
	
	Private _ArticleContent As String
	
	Private _CreatedOn As System.Nullable(Of Date)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _UserID As Integer
	
	Private _ArticleHistorys As EntitySet(Of ArticleHistorys)
	
	Private _Users As EntityRef(Of Users)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnArticleTitleChanging(value As String)
    End Sub
    Partial Private Sub OnArticleTitleChanged()
    End Sub
    Partial Private Sub OnArticleContentChanging(value As String)
    End Sub
    Partial Private Sub OnArticleContentChanged()
    End Sub
    Partial Private Sub OnCreatedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedOnChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ArticleHistorys = New EntitySet(Of ArticleHistorys)(AddressOf Me.attach_ArticleHistorys, AddressOf Me.detach_ArticleHistorys)
		Me._Users = CType(Nothing, EntityRef(Of Users))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleTitle", DbType:="NChar(500)")>  _
	Public Property ArticleTitle() As String
		Get
			Return Me._ArticleTitle
		End Get
		Set
			If (String.Equals(Me._ArticleTitle, value) = false) Then
				Me.OnArticleTitleChanging(value)
				Me.SendPropertyChanging
				Me._ArticleTitle = value
				Me.SendPropertyChanged("ArticleTitle")
				Me.OnArticleTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleContent", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ArticleContent() As String
		Get
			Return Me._ArticleContent
		End Get
		Set
			If (String.Equals(Me._ArticleContent, value) = false) Then
				Me.OnArticleContentChanging(value)
				Me.SendPropertyChanging
				Me._ArticleContent = value
				Me.SendPropertyChanged("ArticleContent")
				Me.OnArticleContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOn", DbType:="DateTime")>  _
	Public Property CreatedOn() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOn
		End Get
		Set
			If (Me._CreatedOn.Equals(value) = false) Then
				Me.OnCreatedOnChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOn = value
				Me.SendPropertyChanged("CreatedOn")
				Me.OnCreatedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._Users.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Articles_ArticleHistorys", Storage:="_ArticleHistorys", ThisKey:="ID", OtherKey:="ArticleID")>  _
	Public Property ArticleHistorys() As EntitySet(Of ArticleHistorys)
		Get
			Return Me._ArticleHistorys
		End Get
		Set
			Me._ArticleHistorys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Users_Articles", Storage:="_Users", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Users() As Users
		Get
			Return Me._Users.Entity
		End Get
		Set
			Dim previousValue As Users = Me._Users.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Users.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Users.Entity = Nothing
					previousValue.Articles.Remove(Me)
				End If
				Me._Users.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Articles.Add(Me)
					Me._UserID = value.ID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Users")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleHistorys(ByVal entity As ArticleHistorys)
		Me.SendPropertyChanging
		entity.Articles = Me
	End Sub
	
	Private Sub detach_ArticleHistorys(ByVal entity As ArticleHistorys)
		Me.SendPropertyChanging
		entity.Articles = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleHistorys")>  _
Partial Public Class ArticleHistorys
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ArticleID As Integer
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _UpdateDate As System.Nullable(Of Date)
	
	Private _ArticleTile As String
	
	Private _ArticleContent As String
	
	Private _Articles As EntityRef(Of Articles)
	
	Private _Users As EntityRef(Of Users)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnArticleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUpdateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateDateChanged()
    End Sub
    Partial Private Sub OnArticleTileChanging(value As String)
    End Sub
    Partial Private Sub OnArticleTileChanged()
    End Sub
    Partial Private Sub OnArticleContentChanging(value As String)
    End Sub
    Partial Private Sub OnArticleContentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Articles = CType(Nothing, EntityRef(Of Articles))
		Me._Users = CType(Nothing, EntityRef(Of Users))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", DbType:="Int NOT NULL")>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				If Me._Articles.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticleID = value
				Me.SendPropertyChanged("ArticleID")
				Me.OnArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				If Me._Users.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdateDate", DbType:="DateTime")>  _
	Public Property UpdateDate() As System.Nullable(Of Date)
		Get
			Return Me._UpdateDate
		End Get
		Set
			If (Me._UpdateDate.Equals(value) = false) Then
				Me.OnUpdateDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdateDate = value
				Me.SendPropertyChanged("UpdateDate")
				Me.OnUpdateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleTile", DbType:="NVarChar(500)")>  _
	Public Property ArticleTile() As String
		Get
			Return Me._ArticleTile
		End Get
		Set
			If (String.Equals(Me._ArticleTile, value) = false) Then
				Me.OnArticleTileChanging(value)
				Me.SendPropertyChanging
				Me._ArticleTile = value
				Me.SendPropertyChanged("ArticleTile")
				Me.OnArticleTileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleContent", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ArticleContent() As String
		Get
			Return Me._ArticleContent
		End Get
		Set
			If (String.Equals(Me._ArticleContent, value) = false) Then
				Me.OnArticleContentChanging(value)
				Me.SendPropertyChanging
				Me._ArticleContent = value
				Me.SendPropertyChanged("ArticleContent")
				Me.OnArticleContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Articles_ArticleHistorys", Storage:="_Articles", ThisKey:="ArticleID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Articles() As Articles
		Get
			Return Me._Articles.Entity
		End Get
		Set
			Dim previousValue As Articles = Me._Articles.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Articles.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Articles.Entity = Nothing
					previousValue.ArticleHistorys.Remove(Me)
				End If
				Me._Articles.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleHistorys.Add(Me)
					Me._ArticleID = value.ID
				Else
					Me._ArticleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Articles")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Users_ArticleHistorys", Storage:="_Users", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Users() As Users
		Get
			Return Me._Users.Entity
		End Get
		Set
			Dim previousValue As Users = Me._Users.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Users.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Users.Entity = Nothing
					previousValue.ArticleHistorys.Remove(Me)
				End If
				Me._Users.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleHistorys.Add(Me)
					Me._UserID = value.ID
				Else
					Me._UserID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Users")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
